"""
Rating engine for the insurance pricing library.

This module handles the rating calculations by applying base values
and factors to the input data.
"""

import os
import polars as pl
import logging
from pathlib import Path
from typing import Dict, Optional, Union, Tuple

from py_pricer import get_rating_dir
from py_pricer.utils import ensure_directory_exists

# Create a module-specific logger
logger = logging.getLogger('py_pricer.rating_engine')

def load_base_values() -> Optional[pl.DataFrame]:
    """
    Load base values from the CSV file in the tables directory.
    
    Returns:
        Optional[pl.DataFrame]: DataFrame containing the base values or None if loading fails
    """
    try:
        # Get the rating directory and construct the path to the base values CSV
        rating_dir = get_rating_dir()
        tables_dir = os.path.join(rating_dir, "tables")
        base_values_path = os.path.join(tables_dir, "base-values.csv")
        
        # Check if the file exists
        if not os.path.exists(base_values_path):
            logger.error(f"Base values file not found at: {base_values_path}")
            return None
        
        # Load the CSV file
        df = pl.read_csv(base_values_path)
        logger.info(f"Successfully loaded base values from {base_values_path}")
        logger.info(f"Base values loaded: {df.height} rows")
        
        return df
    except Exception as e:
        logger.error(f"Error loading base values: {e}", exc_info=True)
        return None

def apply_base_rating(df: pl.DataFrame) -> Tuple[pl.DataFrame, Optional[pl.DataFrame]]:
    """
    Apply base values to the input data based on the Area column.
    
    Args:
        df (pl.DataFrame): Input data
        
    Returns:
        Tuple[pl.DataFrame, Optional[pl.DataFrame]]: 
            - DataFrame with base values applied
            - Base values table or None if loading fails
    """
    try:
        # Check if the Area column exists
        if "Area" not in df.columns:
            logger.warning("Area column not found in input data. Cannot apply base rating.")
            return df, None
        
        # Load base values
        base_values_df = load_base_values()
        if base_values_df is None:
            logger.warning("Failed to load base values. Skipping base rating.")
            return df, None
        
        # Convert base values to a dictionary for faster lookups
        base_dict = dict(zip(base_values_df["Area"].to_list(), base_values_df["Base"].to_list()))
        
        # Create a new column with the base value
        df = df.with_columns(
            pl.col("Area").map_dict(base_dict).alias("BaseValue")
        )
        
        logger.info(f"Applied base values to {df.height} rows")
        return df, base_values_df
    except Exception as e:
        logger.error(f"Error applying base rating: {e}", exc_info=True)
        return df, None
